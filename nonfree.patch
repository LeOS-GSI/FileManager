diff --git a/app/build.gradle b/app/build.gradle
index 0734b43a..76c7f5e2 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -11,22 +11,6 @@ kapt {
 }
 apply plugin: 'kotlin-parcelize'
 
-apply from: '../signing.gradle'
-
-//#ifdef NONFREE
-buildscript {
-    repositories {
-        google()
-        mavenCentral()
-    }
-    dependencies {
-        classpath 'com.google.gms:google-services:4.3.14'
-        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.2'
-    }
-}
-apply plugin: 'com.google.gms.google-services'
-apply plugin: 'com.google.firebase.crashlytics'
-//#endif
 
 android {
     namespace 'me.zhanghai.android.files'
@@ -63,12 +47,6 @@ android {
             minifyEnabled true
             shrinkResources true
             proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
-            signingConfig signingConfigs.release
-//#ifdef NONFREE
-            firebaseCrashlytics {
-                nativeSymbolUploadEnabled true
-            }
-//#endif
         }
     }
     packagingOptions {
@@ -193,10 +171,4 @@ dependencies {
     // Also a dependency of jCIFS-NG and Junrar.
     implementation 'org.slf4j:slf4j-android:1.7.36'
 
-//#ifdef NONFREE
-    implementation 'com.github.junrar:junrar:7.4.1'
-    implementation platform('com.google.firebase:firebase-bom:30.4.0')
-    implementation 'com.google.firebase:firebase-analytics'
-    implementation 'com.google.firebase:firebase-crashlytics-ndk'
-//#endif
 }
diff --git a/app/src/main/java/me/zhanghai/android/files/app/AppInitializers.kt b/app/src/main/java/me/zhanghai/android/files/app/AppInitializers.kt
index 0cfcd0ed..4929ff3a 100644
--- a/app/src/main/java/me/zhanghai/android/files/app/AppInitializers.kt
+++ b/app/src/main/java/me/zhanghai/android/files/app/AppInitializers.kt
@@ -38,7 +38,6 @@ val appInitializers = listOf(
 
 private fun initializeCrashlytics() {
 //#ifdef NONFREE
-    me.zhanghai.android.files.nonfree.CrashlyticsInitializer.initialize()
 //#endif
 }
 
diff --git a/app/src/main/java/me/zhanghai/android/files/nonfree/CrashlyticsInitializer.kt b/app/src/main/java/me/zhanghai/android/files/nonfree/CrashlyticsInitializer.kt
deleted file mode 100644
index e613f5eb..00000000
--- a/app/src/main/java/me/zhanghai/android/files/nonfree/CrashlyticsInitializer.kt
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (c) 2019 Hai Zhang <dreaming.in.code.zh@gmail.com>
- * All Rights Reserved.
- */
-
-package me.zhanghai.android.files.nonfree
-
-import android.annotation.SuppressLint
-import android.content.pm.PackageManager
-import android.content.pm.Signature
-import com.google.firebase.crashlytics.FirebaseCrashlytics
-import me.zhanghai.android.files.BuildConfig
-import me.zhanghai.android.files.app.application
-import me.zhanghai.android.files.app.packageManager
-import me.zhanghai.android.files.util.getPackageInfoOrNull
-import java.security.MessageDigest
-import java.security.NoSuchAlgorithmException
-
-object CrashlyticsInitializer {
-    private val HEX_CHARS = "0123456789ABCDEF".toCharArray()
-
-    fun initialize() {
-        if (BuildConfig.DEBUG) {
-            return
-        }
-        if (!verifyPackageName() || !verifySignature()) {
-            // Please, don't spam.
-            return
-        }
-        FirebaseCrashlytics.getInstance().setCrashlyticsCollectionEnabled(true)
-    }
-
-    private fun verifyPackageName(): Boolean {
-        return application.packageName == "me.zhanghai.android.files"
-    }
-
-    @SuppressLint("PackageManagerGetSignatures")
-    private fun verifySignature(): Boolean {
-        val packageInfo = packageManager.getPackageInfoOrNull(
-            application.packageName, PackageManager.GET_SIGNATURES
-        ) ?: return false
-        return packageInfo.signatures.size == 1
-            && computeCertificateFingerprint(packageInfo.signatures[0]) == ("87:3B:9B:60:C7:7C:F7"
-            + ":F3:CD:5F:AE:66:D0:FE:11:2C:4A:86:97:3E:11:8E:E8:A2:9C:34:6C:4C:67:3C:97:F0")
-    }
-
-    private fun computeCertificateFingerprint(certificate: Signature): String {
-        val messageDigest = try {
-            MessageDigest.getInstance("SHA-256")
-        } catch (e: NoSuchAlgorithmException) {
-            throw AssertionError(e)
-        }
-        val digest = messageDigest.digest(certificate.toByteArray())
-        val chars = CharArray(3 * digest.size - 1)
-        for (index in digest.indices) {
-            val byte = digest[index].toInt() and 0xFF
-            chars[3 * index] = HEX_CHARS[byte ushr 4]
-            chars[3 * index + 1] = HEX_CHARS[byte and 0x0F]
-            if (index < digest.size - 1) {
-                chars[3 * index + 2] = ':'
-            }
-        }
-        return String(chars)
-    }
-}
diff --git a/app/src/main/java/me/zhanghai/android/files/nonfree/RarArchiveEntry.kt b/app/src/main/java/me/zhanghai/android/files/nonfree/RarArchiveEntry.kt
deleted file mode 100644
index c2ffd4fa..00000000
--- a/app/src/main/java/me/zhanghai/android/files/nonfree/RarArchiveEntry.kt
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (c) 2019 Hai Zhang <dreaming.in.code.zh@gmail.com>
- * All Rights Reserved.
- */
-
-package me.zhanghai.android.files.nonfree
-
-import com.github.junrar.rarfile.FileHeader
-import org.apache.commons.compress.archivers.ArchiveEntry
-import org.apache.commons.compress.archivers.zip.ZipEncoding
-import java.util.Date
-
-class RarArchiveEntry(val header: FileHeader, zipEncoding: ZipEncoding) : ArchiveEntry {
-    private val name: String
-
-    init {
-        @Suppress("DEPRECATION")
-        var name = header.fileNameW
-        if (name.isNullOrEmpty()) {
-            name = zipEncoding.decode(header.fileNameByteArray)
-        }
-        name = name.replace('\\', '/')
-        this.name = name
-    }
-
-    override fun getName(): String = name
-
-    override fun getSize(): Long = header.fullUnpackSize
-
-    override fun isDirectory(): Boolean = header.isDirectory
-
-    override fun getLastModifiedDate(): Date = header.mTime
-}
diff --git a/app/src/main/java/me/zhanghai/android/files/nonfree/RarChannelVolumeManager.kt b/app/src/main/java/me/zhanghai/android/files/nonfree/RarChannelVolumeManager.kt
deleted file mode 100644
index e8596371..00000000
--- a/app/src/main/java/me/zhanghai/android/files/nonfree/RarChannelVolumeManager.kt
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (c) 2022 Hai Zhang <dreaming.in.code.zh@gmail.com>
- * All Rights Reserved.
- */
-
-package me.zhanghai.android.files.nonfree
-
-import com.github.junrar.Archive
-import com.github.junrar.io.SeekableReadOnlyByteChannel
-import com.github.junrar.volume.Volume
-import com.github.junrar.volume.VolumeManager
-import java8.nio.channels.SeekableByteChannel
-import me.zhanghai.android.files.compat.withInitial
-import java.io.EOFException
-import java.io.IOException
-import java.nio.ByteBuffer
-
-internal class RarChannelVolumeManager(
-    private val channel: SeekableByteChannel
-) : VolumeManager {
-    override fun nextVolume(archive: Archive, lastVolume: Volume?): Volume? =
-        if (lastVolume == null) RarChannelVolume(archive, channel) else null
-}
-
-private class RarChannelVolume(
-    private val archive: Archive,
-    private val channel: SeekableByteChannel
-) : Volume {
-    private val delegateChannel = DelegateSeekableReadOnlyByteChannel(channel)
-
-    @Throws(IOException::class)
-    override fun getChannel(): SeekableReadOnlyByteChannel = delegateChannel
-
-    override fun getLength(): Long =
-        try {
-            channel.size()
-        } catch (e: IOException) {
-            e.printStackTrace()
-            0
-        }
-
-    override fun getArchive(): Archive = archive
-}
-
-private class DelegateSeekableReadOnlyByteChannel(
-    private val channel: SeekableByteChannel
-) : SeekableReadOnlyByteChannel {
-    private val SINGLE_BYTE_BUFFER = ThreadLocal::class.withInitial { ByteBuffer.allocate(1) }
-
-    @Throws(IOException::class)
-    override fun getPosition(): Long = channel.position()
-
-    @Throws(IOException::class)
-    override fun setPosition(pos: Long) {
-        channel.position(pos)
-    }
-
-    @Throws(IOException::class)
-    override fun read(): Int {
-        val buffer = SINGLE_BYTE_BUFFER.get()!!
-        buffer.clear()
-        while (true) {
-            when (channel.read(buffer)) {
-                -1 -> return -1
-                0 -> continue
-                else -> return buffer[0].toInt() and 0xFF
-            }
-        }
-    }
-
-    @Throws(IOException::class)
-    override fun read(buffer: ByteArray, off: Int, count: Int): Int {
-        if (buffer.isEmpty()) {
-            return 0
-        }
-        val byteBuffer = ByteBuffer.wrap(buffer, off, count)
-        while (true) {
-            val bytesRead = channel.read(byteBuffer)
-            if (bytesRead == 0) {
-                continue
-            }
-            return bytesRead
-        }
-    }
-
-    @Throws(IOException::class)
-    override fun readFully(buffer: ByteArray, count: Int): Int {
-        require(count <= buffer.size) {
-            "count > buffer.size: count = $count, buffer.size = ${buffer.size}"
-        }
-        if (count == 0) {
-            return 0
-        }
-        val byteBuffer = ByteBuffer.wrap(buffer, 0, count)
-        while (byteBuffer.hasRemaining()) {
-            if (channel.read(byteBuffer) == -1) {
-                throw EOFException()
-            }
-        }
-        return count
-    }
-
-    @Throws(IOException::class)
-    override fun close() {
-        channel.close()
-    }
-}
diff --git a/app/src/main/java/me/zhanghai/android/files/nonfree/RarFile.kt b/app/src/main/java/me/zhanghai/android/files/nonfree/RarFile.kt
deleted file mode 100644
index d278c0b1..00000000
--- a/app/src/main/java/me/zhanghai/android/files/nonfree/RarFile.kt
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Copyright (c) 2019 Hai Zhang <dreaming.in.code.zh@gmail.com>
- * All Rights Reserved.
- */
-
-package me.zhanghai.android.files.nonfree
-
-import com.github.junrar.Archive
-import com.github.junrar.exception.RarException
-import java8.nio.channels.SeekableByteChannel
-import java8.nio.file.Path
-import me.zhanghai.android.files.provider.archive.archiver.ArchiveException
-import me.zhanghai.android.files.provider.common.newByteChannel
-import org.apache.commons.compress.archivers.zip.ZipEncodingHelper
-import org.apache.commons.compress.utils.IOUtils
-import java.io.Closeable
-import java.io.IOException
-import java.io.InputStream
-import java.io.PipedInputStream
-import java.io.PipedOutputStream
-import kotlin.math.max
-
-class RarFile(channel: SeekableByteChannel, encoding: String?) : Closeable {
-    private var archive =
-        try {
-            Archive(RarChannelVolumeManager(channel), null, null)
-        } catch (e: RarException) {
-            throw ArchiveException(e)
-        }
-
-    private val zipEncoding = ZipEncodingHelper.getZipEncoding(encoding)
-
-    @get:Throws(IOException::class)
-    val nextEntry: RarArchiveEntry?
-        get() = archive.nextFileHeader()?.let { RarArchiveEntry(it, zipEncoding) }
-
-    @get:Throws(IOException::class)
-    val entries: Iterable<RarArchiveEntry>
-        get() {
-            val entries = mutableListOf<RarArchiveEntry>()
-            for (header in archive.fileHeaders) {
-                entries += RarArchiveEntry(header, zipEncoding)
-            }
-            return entries
-        }
-
-    @Throws(IOException::class)
-    fun getInputStream(entry: RarArchiveEntry): InputStream {
-        val inputStream = PipedInputStream()
-        val outputStream = PipedOutputStream(inputStream)
-        Thread {
-            try {
-                outputStream.use { archive.extractFile(entry.header, it) }
-            } catch (e: IOException) {
-                e.printStackTrace()
-            } catch (e: RarException) {
-                e.printStackTrace()
-            }
-        }.start()
-        return inputStream
-    }
-
-    @Throws(IOException::class)
-    override fun close() {
-        archive.close()
-    }
-
-    companion object {
-        const val RAR = "rar"
-
-        private val SIGNATURE_OLD = byteArrayOf(0x52, 0x45, 0x7e, 0x5e)
-        private val SIGNATURE_V4 = byteArrayOf(0x52, 0x61, 0x72, 0x21, 0x1A, 0x07, 0x00)
-        private val SIGNATURE_V5 = byteArrayOf(0x52, 0x61, 0x72, 0x21, 0x1A, 0x07, 0x01)
-
-        @Throws(IOException::class)
-        fun detect(inputStream: InputStream): String? {
-            require(inputStream.markSupported()) { "InputStream.markSupported() returned false" }
-            val signature = ByteArray(max(SIGNATURE_OLD.size, SIGNATURE_V4.size))
-            inputStream.mark(signature.size)
-            val signatureLength = try {
-                IOUtils.readFully(inputStream, signature)
-            } finally {
-                inputStream.reset()
-            }
-            return if (matches(signature, signatureLength)) RAR else null
-        }
-
-        private fun matches(signature: ByteArray, length: Int): Boolean =
-            matches(signature, length, SIGNATURE_OLD)
-                || matches(signature, length, SIGNATURE_V4)
-                || matches(signature, length, SIGNATURE_V5)
-
-        private fun matches(actual: ByteArray, actualLength: Int, expected: ByteArray): Boolean {
-            if (actualLength < expected.size) {
-                return false
-            }
-            for (index in expected.indices) {
-                if (actual[index] != expected[index]) {
-                    return false
-                }
-            }
-            return true
-        }
-
-        fun create(file: Path, encoding: String?): RarFile =
-            RarFile(file.newByteChannel(), encoding)
-    }
-}
diff --git a/app/src/main/java/me/zhanghai/android/files/provider/archive/archiver/ArchiveException.kt b/app/src/main/java/me/zhanghai/android/files/provider/archive/archiver/ArchiveException.kt
index 9b5c2ca2..2d0579e5 100644
--- a/app/src/main/java/me/zhanghai/android/files/provider/archive/archiver/ArchiveException.kt
+++ b/app/src/main/java/me/zhanghai/android/files/provider/archive/archiver/ArchiveException.kt
@@ -5,9 +5,7 @@
 
 package me.zhanghai.android.files.provider.archive.archiver
 
-//#ifdef NONFREE
-import com.github.junrar.exception.RarException
-//#endif
+
 import org.apache.commons.compress.compressors.CompressorException
 import java.io.IOException
 import org.apache.commons.compress.archivers.ArchiveException as ApacheArchiveException
@@ -17,7 +15,5 @@ class ArchiveException : IOException {
 
     constructor(cause: CompressorException) : super(cause)
 
-//#ifdef NONFREE
-    constructor(cause: RarException) : super(cause)
-//#endif
+
 }
diff --git a/app/src/main/java/me/zhanghai/android/files/provider/archive/archiver/ArchiveReader.kt b/app/src/main/java/me/zhanghai/android/files/provider/archive/archiver/ArchiveReader.kt
index 5c41b47b..892a0309 100644
--- a/app/src/main/java/me/zhanghai/android/files/provider/archive/archiver/ArchiveReader.kt
+++ b/app/src/main/java/me/zhanghai/android/files/provider/archive/archiver/ArchiveReader.kt
@@ -18,8 +18,6 @@ import me.zhanghai.android.files.R
 import me.zhanghai.android.files.compat.toJavaSeekableByteChannel
 import me.zhanghai.android.files.compat.use
 //#ifdef NONFREE
-import me.zhanghai.android.files.nonfree.RarArchiveEntry
-import me.zhanghai.android.files.nonfree.RarFile
 //#endif
 import me.zhanghai.android.files.provider.common.DelegateForceableSeekableByteChannel
 import me.zhanghai.android.files.provider.common.DelegateInputStream
@@ -146,10 +144,7 @@ object ArchiveReader {
                     }
                     return SevenZFile::class.create(file).use { it.entries.toList() }
                 }
-                //#ifdef NONFREE
-                archiveType == RarFile.RAR ->
-                    return RarFile.create(file, encoding).use { it.entries.toList() }
-                //#endif
+
                 // Unnecessary, but teaches lint that compressorType != null below might be false.
                 else -> {}
             }
@@ -282,30 +277,7 @@ object ArchiveReader {
                         }
                     }
                 }
-//#ifdef NONFREE
-                entry is RarArchiveEntry -> {
-                    var successful = false
-                    var rarFile: RarFile? = null
-                    return try {
-                        rarFile = RarFile.create(file, encoding)
-                        var inputStream: InputStream? = null
-                        while (true) {
-                            val currentEntry = rarFile.nextEntry ?: break
-                            if (currentEntry.name != entry.name) {
-                                continue
-                            }
-                            inputStream = rarFile.getInputStream(currentEntry)
-                            successful = true
-                            break
-                        }
-                        inputStream ?: throw NoSuchFileException(file.toString())
-                    } finally {
-                        if (!successful) {
-                            rarFile?.close()
-                        }
-                    }
-                }
-//#endif
+
                 // Unnecessary, but teaches lint that compressorType != null below might be false.
                 else -> {}
             }
@@ -354,13 +326,7 @@ object ArchiveReader {
 
     @Throws(ApacheArchiveException::class)
     private fun detectArchiveType(inputStream: InputStream): String =
-//#ifdef NONFREE
-        try {
-            RarFile.detect(inputStream)
-        } catch (e: IOException) {
-            throw ApacheArchiveException("RarFile.detect()", e)
-        } ?:
-//#endif
+
         ArchiveStreamFactory.detect(inputStream)
 
     private fun KClass<ZipFileCompat>.isSupported(file: Path): Boolean =
